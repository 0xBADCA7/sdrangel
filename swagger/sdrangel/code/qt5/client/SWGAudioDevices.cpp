/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGAudioDevices.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGAudioDevices::SWGAudioDevices(QString* json) {
    init();
    this->fromJson(*json);
}

SWGAudioDevices::SWGAudioDevices() {
    init();
}

SWGAudioDevices::~SWGAudioDevices() {
    this->cleanup();
}

void
SWGAudioDevices::init() {
    nbInputDevices = NULL;
inputDevices = new QList<QString*>();
nbOutputDevices = NULL;
outputDevices = new QList<QString*>();
}

void
SWGAudioDevices::cleanup() {
    
if(inputDevices != NULL) {
        QList<QString*>* arr = inputDevices;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete inputDevices;
    }

if(outputDevices != NULL) {
        QList<QString*>* arr = outputDevices;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete outputDevices;
    }
}

SWGAudioDevices*
SWGAudioDevices::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGAudioDevices::fromJsonObject(QJsonObject &pJson) {
    setValue(&nbInputDevices, pJson["nbInputDevices"], "qint32", "");
setValue(&inputDevices, pJson["inputDevices"], "QList", "QString");
setValue(&nbOutputDevices, pJson["nbOutputDevices"], "qint32", "");
setValue(&outputDevices, pJson["outputDevices"], "QList", "QString");
}

QString
SWGAudioDevices::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGAudioDevices::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("nbInputDevices", QJsonValue(nbInputDevices));

    
    QList<QString*>* inputDevicesList = inputDevices;
    QJsonArray inputDevicesJsonArray;
    toJsonArray((QList<void*>*)inputDevices, &inputDevicesJsonArray, "inputDevices", "QString");

    obj->insert("inputDevices", inputDevicesJsonArray);
    
obj->insert("nbOutputDevices", QJsonValue(nbOutputDevices));

    
    QList<QString*>* outputDevicesList = outputDevices;
    QJsonArray outputDevicesJsonArray;
    toJsonArray((QList<void*>*)outputDevices, &outputDevicesJsonArray, "outputDevices", "QString");

    obj->insert("outputDevices", outputDevicesJsonArray);
    

    return obj;
}

qint32
SWGAudioDevices::getNbInputDevices() {
    return nbInputDevices;
}
void
SWGAudioDevices::setNbInputDevices(qint32 nbInputDevices) {
    this->nbInputDevices = nbInputDevices;
}

QList<QString*>*
SWGAudioDevices::getInputDevices() {
    return inputDevices;
}
void
SWGAudioDevices::setInputDevices(QList<QString*>* inputDevices) {
    this->inputDevices = inputDevices;
}

qint32
SWGAudioDevices::getNbOutputDevices() {
    return nbOutputDevices;
}
void
SWGAudioDevices::setNbOutputDevices(qint32 nbOutputDevices) {
    this->nbOutputDevices = nbOutputDevices;
}

QList<QString*>*
SWGAudioDevices::getOutputDevices() {
    return outputDevices;
}
void
SWGAudioDevices::setOutputDevices(QList<QString*>* outputDevices) {
    this->outputDevices = outputDevices;
}



} /* namespace Swagger */

