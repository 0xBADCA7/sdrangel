/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube     ---   Limitations and specifcities:       * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Stopping instance i.e. /sdrangel with DELETE method is a server only feature. It allows stopping the instance nicely.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV demodulator, Channel Analyzer, Channel Analyzer NG, LoRa demodulator, TCP source   * The content type returned is always application/json except in the following cases:     * An incorrect URL was specified: this document is returned as text/html with a status 400    --- 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGChannelReport.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace SWGSDRangel {

SWGChannelReport::SWGChannelReport(QString* json) {
    init();
    this->fromJson(*json);
}

SWGChannelReport::SWGChannelReport() {
    channel_type = nullptr;
    m_channel_type_isSet = false;
    tx = 0;
    m_tx_isSet = false;
    am_demod_report = nullptr;
    m_am_demod_report_isSet = false;
    nfm_demod_report = nullptr;
    m_nfm_demod_report_isSet = false;
    nfm_mod_report = nullptr;
    m_nfm_mod_report_isSet = false;
}

SWGChannelReport::~SWGChannelReport() {
    this->cleanup();
}

void
SWGChannelReport::init() {
    channel_type = new QString("");
    m_channel_type_isSet = false;
    tx = 0;
    m_tx_isSet = false;
    am_demod_report = new SWGAMDemodReport();
    m_am_demod_report_isSet = false;
    nfm_demod_report = new SWGNFMDemodReport();
    m_nfm_demod_report_isSet = false;
    nfm_mod_report = new SWGNFMModReport();
    m_nfm_mod_report_isSet = false;
}

void
SWGChannelReport::cleanup() {
    if(channel_type != nullptr) { 
        delete channel_type;
    }

    if(am_demod_report != nullptr) { 
        delete am_demod_report;
    }
    if(nfm_demod_report != nullptr) { 
        delete nfm_demod_report;
    }
    if(nfm_mod_report != nullptr) { 
        delete nfm_mod_report;
    }
}

SWGChannelReport*
SWGChannelReport::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGChannelReport::fromJsonObject(QJsonObject &pJson) {
    ::SWGSDRangel::setValue(&channel_type, pJson["channelType"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&tx, pJson["tx"], "qint32", "");
    
    ::SWGSDRangel::setValue(&am_demod_report, pJson["AMDemodReport"], "SWGAMDemodReport", "SWGAMDemodReport");
    
    ::SWGSDRangel::setValue(&nfm_demod_report, pJson["NFMDemodReport"], "SWGNFMDemodReport", "SWGNFMDemodReport");
    
    ::SWGSDRangel::setValue(&nfm_mod_report, pJson["NFMModReport"], "SWGNFMModReport", "SWGNFMModReport");
    
}

QString
SWGChannelReport::asJson ()
{
    QJsonObject* obj = this->asJsonObject();

    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    delete obj;
    return QString(bytes);
}

QJsonObject*
SWGChannelReport::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    if(channel_type != nullptr && *channel_type != QString("")){
        toJsonValue(QString("channelType"), channel_type, obj, QString("QString"));
    }
    if(m_tx_isSet){
        obj->insert("tx", QJsonValue(tx));
    }
    if((am_demod_report != nullptr) && (am_demod_report->isSet())){
        toJsonValue(QString("AMDemodReport"), am_demod_report, obj, QString("SWGAMDemodReport"));
    }
    if((nfm_demod_report != nullptr) && (nfm_demod_report->isSet())){
        toJsonValue(QString("NFMDemodReport"), nfm_demod_report, obj, QString("SWGNFMDemodReport"));
    }
    if((nfm_mod_report != nullptr) && (nfm_mod_report->isSet())){
        toJsonValue(QString("NFMModReport"), nfm_mod_report, obj, QString("SWGNFMModReport"));
    }

    return obj;
}

QString*
SWGChannelReport::getChannelType() {
    return channel_type;
}
void
SWGChannelReport::setChannelType(QString* channel_type) {
    this->channel_type = channel_type;
    this->m_channel_type_isSet = true;
}

qint32
SWGChannelReport::getTx() {
    return tx;
}
void
SWGChannelReport::setTx(qint32 tx) {
    this->tx = tx;
    this->m_tx_isSet = true;
}

SWGAMDemodReport*
SWGChannelReport::getAmDemodReport() {
    return am_demod_report;
}
void
SWGChannelReport::setAmDemodReport(SWGAMDemodReport* am_demod_report) {
    this->am_demod_report = am_demod_report;
    this->m_am_demod_report_isSet = true;
}

SWGNFMDemodReport*
SWGChannelReport::getNfmDemodReport() {
    return nfm_demod_report;
}
void
SWGChannelReport::setNfmDemodReport(SWGNFMDemodReport* nfm_demod_report) {
    this->nfm_demod_report = nfm_demod_report;
    this->m_nfm_demod_report_isSet = true;
}

SWGNFMModReport*
SWGChannelReport::getNfmModReport() {
    return nfm_mod_report;
}
void
SWGChannelReport::setNfmModReport(SWGNFMModReport* nfm_mod_report) {
    this->nfm_mod_report = nfm_mod_report;
    this->m_nfm_mod_report_isSet = true;
}


bool
SWGChannelReport::isSet(){
    bool isObjectUpdated = false;
    do{
        if(channel_type != nullptr && *channel_type != QString("")){ isObjectUpdated = true; break;}
        if(m_tx_isSet){ isObjectUpdated = true; break;}
        if(am_demod_report != nullptr && am_demod_report->isSet()){ isObjectUpdated = true; break;}
        if(nfm_demod_report != nullptr && nfm_demod_report->isSet()){ isObjectUpdated = true; break;}
        if(nfm_mod_report != nullptr && nfm_mod_report->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

