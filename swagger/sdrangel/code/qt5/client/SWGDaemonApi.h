/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube     ---   Limitations and specifcities:       * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 4.1.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGDaemonApi_H_
#define _SWG_SWGDaemonApi_H_

#include "SWGHttpRequest.h"

#include "SWGChannelSettings.h"
#include "SWGDaemonSummaryResponse.h"
#include "SWGDeviceReport.h"
#include "SWGDeviceSettings.h"
#include "SWGDeviceState.h"
#include "SWGErrorResponse.h"
#include "SWGLoggingInfo.h"

#include <QObject>

namespace SWGSDRangel {

class SWGDaemonApi: public QObject {
    Q_OBJECT

public:
    SWGDaemonApi();
    SWGDaemonApi(QString host, QString basePath);
    ~SWGDaemonApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void daemonChannelSettingsGet();
    void daemonChannelSettingsPatch(SWGChannelSettings& body);
    void daemonChannelSettingsPut(SWGChannelSettings& body);
    void daemonDeviceReportGet();
    void daemonDeviceSettingsGet();
    void daemonDeviceSettingsPatch(SWGDeviceSettings& body);
    void daemonDeviceSettingsPut(SWGDeviceSettings& body);
    void daemonInstanceLoggingGet();
    void daemonInstanceLoggingPut(SWGLoggingInfo& body);
    void daemonInstanceSummary();
    void daemonRunDelete();
    void daemonRunGet();
    void daemonRunPost();
    
private:
    void daemonChannelSettingsGetCallback (SWGHttpRequestWorker * worker);
    void daemonChannelSettingsPatchCallback (SWGHttpRequestWorker * worker);
    void daemonChannelSettingsPutCallback (SWGHttpRequestWorker * worker);
    void daemonDeviceReportGetCallback (SWGHttpRequestWorker * worker);
    void daemonDeviceSettingsGetCallback (SWGHttpRequestWorker * worker);
    void daemonDeviceSettingsPatchCallback (SWGHttpRequestWorker * worker);
    void daemonDeviceSettingsPutCallback (SWGHttpRequestWorker * worker);
    void daemonInstanceLoggingGetCallback (SWGHttpRequestWorker * worker);
    void daemonInstanceLoggingPutCallback (SWGHttpRequestWorker * worker);
    void daemonInstanceSummaryCallback (SWGHttpRequestWorker * worker);
    void daemonRunDeleteCallback (SWGHttpRequestWorker * worker);
    void daemonRunGetCallback (SWGHttpRequestWorker * worker);
    void daemonRunPostCallback (SWGHttpRequestWorker * worker);
    
signals:
    void daemonChannelSettingsGetSignal(SWGChannelSettings* summary);
    void daemonChannelSettingsPatchSignal(SWGChannelSettings* summary);
    void daemonChannelSettingsPutSignal(SWGChannelSettings* summary);
    void daemonDeviceReportGetSignal(SWGDeviceReport* summary);
    void daemonDeviceSettingsGetSignal(SWGDeviceSettings* summary);
    void daemonDeviceSettingsPatchSignal(SWGDeviceSettings* summary);
    void daemonDeviceSettingsPutSignal(SWGDeviceSettings* summary);
    void daemonInstanceLoggingGetSignal(SWGLoggingInfo* summary);
    void daemonInstanceLoggingPutSignal(SWGLoggingInfo* summary);
    void daemonInstanceSummarySignal(SWGDaemonSummaryResponse* summary);
    void daemonRunDeleteSignal(SWGDeviceState* summary);
    void daemonRunGetSignal(SWGDeviceState* summary);
    void daemonRunPostSignal(SWGDeviceState* summary);
    
    void daemonChannelSettingsGetSignalE(SWGChannelSettings* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonChannelSettingsPatchSignalE(SWGChannelSettings* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonChannelSettingsPutSignalE(SWGChannelSettings* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceReportGetSignalE(SWGDeviceReport* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceSettingsGetSignalE(SWGDeviceSettings* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceSettingsPatchSignalE(SWGDeviceSettings* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceSettingsPutSignalE(SWGDeviceSettings* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonInstanceLoggingGetSignalE(SWGLoggingInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonInstanceLoggingPutSignalE(SWGLoggingInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonInstanceSummarySignalE(SWGDaemonSummaryResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonRunDeleteSignalE(SWGDeviceState* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonRunGetSignalE(SWGDeviceState* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonRunPostSignalE(SWGDeviceState* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void daemonChannelSettingsGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonChannelSettingsPatchSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonChannelSettingsPutSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceReportGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceSettingsGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceSettingsPatchSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonDeviceSettingsPutSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonInstanceLoggingGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonInstanceLoggingPutSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonInstanceSummarySignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonRunDeleteSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonRunGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void daemonRunPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
