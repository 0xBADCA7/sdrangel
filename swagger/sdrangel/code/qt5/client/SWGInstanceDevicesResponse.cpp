/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGInstanceDevicesResponse.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGInstanceDevicesResponse::SWGInstanceDevicesResponse(QString* json) {
    init();
    this->fromJson(*json);
}

SWGInstanceDevicesResponse::SWGInstanceDevicesResponse() {
    init();
}

SWGInstanceDevicesResponse::~SWGInstanceDevicesResponse() {
    this->cleanup();
}

void
SWGInstanceDevicesResponse::init() {
    devicecount = NULL;
devices = new QList<SWGDeviceListItem*>();
}

void
SWGInstanceDevicesResponse::cleanup() {
    
if(devices != NULL) {
        QList<SWGDeviceListItem*>* arr = devices;
        foreach(SWGDeviceListItem* o, *arr) {
            delete o;
        }
        delete devices;
    }
}

SWGInstanceDevicesResponse*
SWGInstanceDevicesResponse::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGInstanceDevicesResponse::fromJsonObject(QJsonObject &pJson) {
    setValue(&devicecount, pJson["devicecount"], "qint32", "");
setValue(&devices, pJson["devices"], "QList", "SWGDeviceListItem");
}

QString
SWGInstanceDevicesResponse::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGInstanceDevicesResponse::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("devicecount", QJsonValue(devicecount));

    
    QList<SWGDeviceListItem*>* devicesList = devices;
    QJsonArray devicesJsonArray;
    toJsonArray((QList<void*>*)devices, &devicesJsonArray, "devices", "SWGDeviceListItem");

    obj->insert("devices", devicesJsonArray);
    

    return obj;
}

qint32
SWGInstanceDevicesResponse::getDevicecount() {
    return devicecount;
}
void
SWGInstanceDevicesResponse::setDevicecount(qint32 devicecount) {
    this->devicecount = devicecount;
}

QList<SWGDeviceListItem*>*
SWGInstanceDevicesResponse::getDevices() {
    return devices;
}
void
SWGInstanceDevicesResponse::setDevices(QList<SWGDeviceListItem*>* devices) {
    this->devices = devices;
}



} /* namespace Swagger */

