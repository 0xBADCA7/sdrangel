/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGLoggingInfo.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGLoggingInfo::SWGLoggingInfo(QString* json) {
    init();
    this->fromJson(*json);
}

SWGLoggingInfo::SWGLoggingInfo() {
    init();
}

SWGLoggingInfo::~SWGLoggingInfo() {
    this->cleanup();
}

void
SWGLoggingInfo::init() {
    consoleLevel = new QString("");
fileLevel = new QString("");
dumpToFile = false;
fileName = new QString("");
}

void
SWGLoggingInfo::cleanup() {
    if(consoleLevel != NULL) {
        delete consoleLevel;
    }
if(fileLevel != NULL) {
        delete fileLevel;
    }

if(fileName != NULL) {
        delete fileName;
    }
}

SWGLoggingInfo*
SWGLoggingInfo::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGLoggingInfo::fromJsonObject(QJsonObject &pJson) {
    setValue(&consoleLevel, pJson["consoleLevel"], "QString", "QString");
setValue(&fileLevel, pJson["fileLevel"], "QString", "QString");
setValue(&dumpToFile, pJson["dumpToFile"], "bool", "");
setValue(&fileName, pJson["fileName"], "QString", "QString");
}

QString
SWGLoggingInfo::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGLoggingInfo::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("consoleLevel"), consoleLevel, obj, QString("QString"));
    
        

    
    toJsonValue(QString("fileLevel"), fileLevel, obj, QString("QString"));
    
        
obj->insert("dumpToFile", QJsonValue(dumpToFile));

    
    toJsonValue(QString("fileName"), fileName, obj, QString("QString"));
    
        

    return obj;
}

QString*
SWGLoggingInfo::getConsoleLevel() {
    return consoleLevel;
}
void
SWGLoggingInfo::setConsoleLevel(QString* consoleLevel) {
    this->consoleLevel = consoleLevel;
}

QString*
SWGLoggingInfo::getFileLevel() {
    return fileLevel;
}
void
SWGLoggingInfo::setFileLevel(QString* fileLevel) {
    this->fileLevel = fileLevel;
}

bool
SWGLoggingInfo::getDumpToFile() {
    return dumpToFile;
}
void
SWGLoggingInfo::setDumpToFile(bool dumpToFile) {
    this->dumpToFile = dumpToFile;
}

QString*
SWGLoggingInfo::getFileName() {
    return fileName;
}
void
SWGLoggingInfo::setFileName(QString* fileName) {
    this->fileName = fileName;
}



} /* namespace Swagger */

