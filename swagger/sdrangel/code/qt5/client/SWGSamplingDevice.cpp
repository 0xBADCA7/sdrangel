/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGSamplingDevice.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGSamplingDevice::SWGSamplingDevice(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSamplingDevice::SWGSamplingDevice() {
    init();
}

SWGSamplingDevice::~SWGSamplingDevice() {
    this->cleanup();
}

void
SWGSamplingDevice::init() {
    index = NULL;
hwType = new QString("");
tx = false;
nbStreams = NULL;
streamIndex = NULL;
sequence = NULL;
serial = new QString("");
centerFrequency = 0L;
bandwidth = NULL;
}

void
SWGSamplingDevice::cleanup() {
    
if(hwType != NULL) {
        delete hwType;
    }




if(serial != NULL) {
        delete serial;
    }


}

SWGSamplingDevice*
SWGSamplingDevice::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSamplingDevice::fromJsonObject(QJsonObject &pJson) {
    setValue(&index, pJson["index"], "qint32", "");
setValue(&hwType, pJson["hwType"], "QString", "QString");
setValue(&tx, pJson["tx"], "bool", "");
setValue(&nbStreams, pJson["nbStreams"], "qint32", "");
setValue(&streamIndex, pJson["streamIndex"], "qint32", "");
setValue(&sequence, pJson["sequence"], "qint32", "");
setValue(&serial, pJson["serial"], "QString", "QString");
setValue(&centerFrequency, pJson["centerFrequency"], "qint64", "");
setValue(&bandwidth, pJson["bandwidth"], "qint32", "");
}

QString
SWGSamplingDevice::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGSamplingDevice::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("index", QJsonValue(index));

    
    toJsonValue(QString("hwType"), hwType, obj, QString("QString"));
    
        
obj->insert("tx", QJsonValue(tx));
obj->insert("nbStreams", QJsonValue(nbStreams));
obj->insert("streamIndex", QJsonValue(streamIndex));
obj->insert("sequence", QJsonValue(sequence));

    
    toJsonValue(QString("serial"), serial, obj, QString("QString"));
    
        
obj->insert("centerFrequency", QJsonValue(centerFrequency));
obj->insert("bandwidth", QJsonValue(bandwidth));

    return obj;
}

qint32
SWGSamplingDevice::getIndex() {
    return index;
}
void
SWGSamplingDevice::setIndex(qint32 index) {
    this->index = index;
}

QString*
SWGSamplingDevice::getHwType() {
    return hwType;
}
void
SWGSamplingDevice::setHwType(QString* hwType) {
    this->hwType = hwType;
}

bool
SWGSamplingDevice::getTx() {
    return tx;
}
void
SWGSamplingDevice::setTx(bool tx) {
    this->tx = tx;
}

qint32
SWGSamplingDevice::getNbStreams() {
    return nbStreams;
}
void
SWGSamplingDevice::setNbStreams(qint32 nbStreams) {
    this->nbStreams = nbStreams;
}

qint32
SWGSamplingDevice::getStreamIndex() {
    return streamIndex;
}
void
SWGSamplingDevice::setStreamIndex(qint32 streamIndex) {
    this->streamIndex = streamIndex;
}

qint32
SWGSamplingDevice::getSequence() {
    return sequence;
}
void
SWGSamplingDevice::setSequence(qint32 sequence) {
    this->sequence = sequence;
}

QString*
SWGSamplingDevice::getSerial() {
    return serial;
}
void
SWGSamplingDevice::setSerial(QString* serial) {
    this->serial = serial;
}

qint64
SWGSamplingDevice::getCenterFrequency() {
    return centerFrequency;
}
void
SWGSamplingDevice::setCenterFrequency(qint64 centerFrequency) {
    this->centerFrequency = centerFrequency;
}

qint32
SWGSamplingDevice::getBandwidth() {
    return bandwidth;
}
void
SWGSamplingDevice::setBandwidth(qint32 bandwidth) {
    this->bandwidth = bandwidth;
}



} /* namespace Swagger */

