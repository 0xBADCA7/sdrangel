/**
 * SDRangel
 * This is the web API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * SWGSamplingDevice.h
 * 
 * Information about a logical device available from an attached hardware device that can be used as a sampling device
 */

#ifndef SWGSamplingDevice_H_
#define SWGSamplingDevice_H_

#include <QJsonObject>


#include <QString>

#include "SWGObject.h"


namespace Swagger {

class SWGSamplingDevice: public SWGObject {
public:
    SWGSamplingDevice();
    SWGSamplingDevice(QString* json);
    virtual ~SWGSamplingDevice();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGSamplingDevice* fromJson(QString &jsonString);

    qint32 getIndex();
    void setIndex(qint32 index);
QString* getHwType();
    void setHwType(QString* hwType);
bool getTx();
    void setTx(bool tx);
qint32 getNbStreams();
    void setNbStreams(qint32 nbStreams);
qint32 getStreamIndex();
    void setStreamIndex(qint32 streamIndex);
qint32 getSequence();
    void setSequence(qint32 sequence);
QString* getSerial();
    void setSerial(QString* serial);
qint64 getCenterFrequency();
    void setCenterFrequency(qint64 centerFrequency);
qint32 getBandwidth();
    void setBandwidth(qint32 bandwidth);

private:
    qint32 index;
QString* hwType;
bool tx;
qint32 nbStreams;
qint32 streamIndex;
qint32 sequence;
QString* serial;
qint64 centerFrequency;
qint32 bandwidth;
};

} /* namespace Swagger */

#endif /* SWGSamplingDevice_H_ */
